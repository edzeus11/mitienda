# üçï Pizzer√≠a Pedronni 24/7 ‚Äì Sitio Web

Sitio web moderno para la pizzer√≠a **Pedronni 24/7**, desarrollada con HTML + Tailwind CSS + JavaScript. Incluye un sistema de carrito de compras y un formulario de contacto funcional, con backend sin servidor desplegado en **Vercel**.

---

## üöÄ Funcionalidades

- üé® Frontend responsive con Tailwind CSS
- üõí Carrito de compras din√°mico (almacenado en `localStorage`)
- üì© Formulario de contacto con backend funcional (`/api/contact`)
- ‚ôø Accesibilidad mejorada con etiquetas `aria` y roles HTML5
- üåô Preparado para producci√≥n y despliegue en Vercel

---

## üìÅ Estructura del Proyecto


---

## üß™ Probar Localmente

Puedes abrir el archivo `index.html` directamente en el navegador.  
> Aseg√∫rate de desplegar el backend (`/api/contact`) para que el formulario funcione correctamente.

---

## ‚òÅÔ∏è Despliegue en Producci√≥n (Vercel)

1. Sube el proyecto a un repositorio en GitHub.
2. Ve a [https://vercel.com/import](https://vercel.com/import) e importa tu repo.
3. Vercel detectar√° autom√°ticamente el archivo `api/contact.js` como funci√≥n serverless.
4. ¬°Listo! Tu sitio quedar√° disponible en una URL como `https://pizzeria247.vercel.app`.

---

## üì¨ Backend: API de Contacto

El archivo `api/contact.js` recibe los datos del formulario:

```js
// POST /api/contact
{
  name: "Juan",
  email: "juan@mail.com",
  message: "Quiero reservar 5 pizzas para ma√±ana"
}
{
  "success": true,
  "message": "Mensaje recibido"
}
// api/contact.js

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo no permitido' });
  }

  const { name, email, message } = req.body;

  if (!name || !email || !message) {
    return res.status(400).json({ error: 'Todos los campos son requeridos' });
  }

  try {
    // Aqu√≠ podr√≠as conectar con un servicio externo (email, base de datos, etc.)
    console.log('Nuevo mensaje de contacto:', {
      nombre: name,
      correo: email,
      mensaje: message
    });

    // Respuesta de √©xito
    return res.status(200).json({ success: true, message: 'Mensaje recibido' });

  } catch (error) {
    console.error('Error en la API de contacto:', error);
    return res.status(500).json({ error: 'Error del servidor' });
  }
}
